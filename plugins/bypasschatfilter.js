// @name Bypass chat filter
// @id bypasschat
// @description Automatically bypasses the chat filter
// @author noam
// @tags utility
const REGEX =
String.fromCharCode(...("\u001flw1v&?v+r7?v+*7?\"vv?\"-\"/?\"-60?\"1v&?\"110&?\"10&?\"00?\"00n%6 (&1?\"00&0?\"00%6 (&1?\"00%6((\"?\"00+,/&?\"00+,/&0?\"004+,/&?\"\u001c0\u001c0?!b7 +?!ss!0?!rt +?!r7 +?!\"//!\"$?!\"//0?!\"//0\" (?!\"07\"1'?!&\"07*\"/?!&\"07*\"/*7:?!&//&-'?!&07*\"/?!&07*\"/*7:?!*h +?!*\"7 +?!*7 +?!*7 +&1?!*7 +&10?!*7 +&0?!*7 +*-?!*7 +*-$?!/,,':?!/,4c),!?!/,4),!?!/,4),!0?!,*,/\"0?!,//, (?!,//,(?!,-&1?!,,!?!,,!0?!,,,!0?!,,,,!0?!,,,,,!0?!,,,,,,,!0?!1&\"070?!6 &7\"?!6$$&1?!6.?!6--:c%6 (&1?!677?!677+,/&?!677.6 +?!6773/6$? s (? s (06 (&1? \"13&7c.6- +&1? \"4(? +*-(? *3\"? /r7? /*7? /*7,1*0? /*70? -67? , (? , (n06 (&1? , (%\" &? , (+&\"'? , (.6- +? , (.6- +&1? , (0? , (06 (? , (06 (&'? , (06 (&1? , (06 (*-$? , (06 (0? , (06(\"? , (06((\"? ,(? ,(.6- +&1? ,(06 (\"? ,,-? ,;? 1\"3? 6.? 6..&1? 6..*-$? 6.0? 6.0+,7? 6-*/*-$60? 6-*//*-$60? 6--*/*-$60? 6-7? 6-7/* (? 6-7/* (&1? 6-7/* (*-$? 6-70? :\"/*0? :!&1%6 ? :!&1%6 (? :!&1%6 (&'? :!&1%6 (&1? :!&1%6 (&10? :!&1%6 (*-$?'r (?'\".-?'* (?'* (+&\"'?'*/',?'*/',0?'*-(?'*-(0?'*10\"?'/ (?',$n%6 (&1?',$$*-?',$$*-$?',-(&:1*!!&1?',,0+?'6 +&?':(&?&)\" 6/\"7&?&)\" 6/\"7&'?&)\" 6/\"7&0?&)\" 6/\"7*-$?&)\" 6/\"7*-$0?&)\" 6/\"7*,-?&)\"(6/\"7&?%c6c c(?%c6c c(c&c1?%w--:?%\"$?%\"$$*-$?%\"$$*77?%\"$$,7?%\"$$0?%\"$,7?%\"$,70?%\"$0?%\"--:?%\"--:%/\"30?%\"--:%6 (&1?%\"-::?%\"7\"00?% 6(?% 6(&1?% 6(*-$?%& (?%& (&1?%&/ +*-$?%&//\"7&?%&//\"7*,?%*-$&1%6 (?%*-$&1%6 (&'?%*-$&1%6 (&1?%*-$&1%6 (&10?%*-$&1%6 (*-$?%*-$&1%6 (0?%*07%6 (?%*07%6 (&'?%*07%6 (&1?%*07%6 (&10?%*07%6 (*-$?%*07%6 (*-$0?%*07%6 (0?%/\"-$&?%,,(?%,,(&1?%6 (?%6 (\"?%6 (&'?%6 (&1?%6 (&10?%6 (+&\"'?%6 (+&\"'0?%6 (*-?%6 (*-$?%6 (*-$0?%6 (*-$0+*7.,7+&1%6 (&1?%6 (.&?%6 (0?%6 (4+*7?%6 (4*7?%6'$&c3\" (&1?%6'$&3\" (&1?%6(?%6(&1?%6((&1?%6((*-?%6(0?%6(4+*7?%6(4*7?%6;?%6;s1?%\u001c6\u001c \u001c(?$\"-$!\"-$?$\"-$!\"-$&'?$\"-$!\"-$0?$\":/,1'?$\":0&;?$,\"70&?+\"1' ,1&0&;?+&0+&?+,\"1?+,\"1&?+,&1?+,.,?+,1&?+,1-*&07?+,1-:?+,70&;?)\" (n,%%?)\" (,%%?)\"3?)&1(n,%%?)*0.?)*9?)*9.?)*99?(\"4(?(-,!?(-,!&\"'?(-,!&'?(-,!&-'?(-,!+&\"'?(-,!), (:?(-,!),(&:?(, (?(,-'6.?(,-'6.0?(6.?(6..&1?(6..*-$?(6.0?(6-*/*-$60?/p*h +?/p*7 +?/\"!*\"?/.%\",?/607?/607*-$?.s%s?.s%,?.wv7&1!\"7&?.\"v7&1!{?.\"v7&1!\"7&?.\"0, +*07?.\"07&1n!\"7&?.\"07&1!{?.\"07&1!\"7i?.\"07&1!\"7p?.\"07&1!\"7&?.\"07&1!\"7*,-?.\"07&1!\"7*,-0?.\"0761!\"7&?.,n%,?.,%s?.,%,?.,7+\"%6 (?.,7+\"%6 (\"?.,7+\"%6 (\"0?.,7+\"%6 (\"9?.,7+\"%6 (&'?.,7+\"%6 (&1?.,7+\"%6 (&10?.,7+\"%6 (*-?.,7+\"%6 (*-$?.,7+\"%6 (*-$0?.,7+\"%6 (0?.,7+&1c%6 (&1?.,7+&1%6 (?.,7+&1%6 (&'?.,7+&1%6 (&1?.,7+&1%6 (&10?.,7+&1%6 (*-?.,7+&1%6 (*-$?.,7+&1%6 (*-$0?.,7+&1%6 ((\"?.,7+&1%6 (0?.6%%?.67+\"?.67+\"%& (&1?.67+\"%6 ((&1?.67+&1?.67+&1%6 (&1?-r$$\"?-r$$&1?-\"9*?-*$$p1?-*$$w+?-*$$\"?-*$$\"+?-*$$\"0?-*$$\"9?-*$$&1?-*$$&10?-,!?-,!c),(&:?-,!+&\"'?-,!), (:?-,!),(&:?-6.!-670?-670\" (?,1$\"0*.?,1$\"0*.0?,1$\"0.?,1$\"0.0?3s1-?3\"4-?3& (&1?3&-*0?3&-*0%6 (&1?3+,-&0&;?3+6 (?3+6(?3+6(&'?3+6(*-$?3+6((&'?3+6((*-$?3+6(0?3+62?3*$%6 (&1?3*.3*0?3*00?3*00&'?3*00&1?3*00&10?3*00&0?3*00%/\"30?3*00*-?3*00*-$?3*00,%%?3,1-?3,1-,?3,1-,$1\"3+:?3,1-,0?31* (?31* (0?31,-?36!&?3600&?3600*?3600*&0?3600:?3600:0?1& 76.?1&7\"1'?1*.)\"4?1*..*-$?0c+*7?0m,m!m?0\"'*07?0 +/,-$?0 1&4*-$?0 1,\"7?0 1,7&?0 1,76.?0&.&-?0&;?0+bh?0+b7?0+r7?0+\"$?0+\"$$&1?0+\"$$*-?0+\"$$*-$?0+&.\"/&?0+*7?0+*7'* (?0+*7&?0+*7&'?0+*7&:?0+*7%6 (?0+*7%6//?0+*7+&\"'?0+*7*-$?0+*7*-$0?0+*70?0+*77&'?0+*77&1?0+*77&10?0+*77*-$?0+*77*-$0?0+*77:?0(\"-(?0/67?0/670?0.&$.\"?0.67?0-\"7 +?0,-n,%n\"n!*7 +?036-(?0\u001c+\u001c*\u001c7?7r77r&v?7r77*&0?7&&70?7&&9?7&07* \"/?7&07* /&?7*7?7*7%6 (?7*70?7*77?7*77*&v?7*77*&%6 (&1?7*77*&0?7*77:%6 (?7*77:4\"-(?7*74\"-(?7,00&1?761'?74w7?74\"7?74\"7+&\"'?74\"77:?746-7?746-7&1?5rw$1\"?5r$1\"?5\"$*-\"?5*\"$1\"?56/5\"?4ss0&?4\"-$?4\"-(?4\"-(&1?4\"-(:?4+,\"1?4+,1&?4*//*&0?4*//:?;1\"7&'?;;;?茊伣?撎伣?舺伣?斦伣?奤阅犔?厳渽犔?儲犔?茊伣?撎伣?奤阻犔?厳瀠犔?ﶾ?\u001f6\u0005\u0007\u0005\u0007?𢡨?𢹚?⹸?ꦆ?ၩ?ꦇ?ஶ?\u001f6s\u0001\u0005v\u001fl$").split("").map(v=>v.charCodeAt(0)^67))
const regex = new RegExp(REGEX, "gi");
function uncensor(msg, replacefunc) {
    regex.lastIndex = 0;
    let match = regex.exec(msg);
    while (match != null) {
        const token = Array.from(msg);
        token[match.index] = replacefunc != null ? replacefunc(token[match.index]) : (token[match.index] + "\u200e")
        msg = token.join("");
        regex.lastIndex = 0;
        match = regex.exec(msg);
    }
    return msg
}
function decryptPacket(token, arrayBuffer) {
    const dataView = new DataView(arrayBuffer);

    const encodedData = new Uint8Array(arrayBuffer.slice(1, arrayBuffer.byteLength - 1));
    const packetId = dataView.getUint8(arrayBuffer.byteLength - 1);

    const base64String = String.fromCharCode(...encodedData);
    const decodedBase64 = atob(base64String);

    const tokenArray = new TextEncoder().encode(token);
    const decodedData = new Uint8Array(decodedBase64.length).map((_, i) => {
        return decodedBase64.charCodeAt(i) ^ tokenArray[i % tokenArray.length];
    });

    const decodedString = String.fromCharCode(...decodedData);

    const packetPayload = decodedString.slice(3);

    return { packetId, packetPayload };
}
hook(WebSocket.prototype, "send", {
    apply(f, th, args) {
        try {
            let decrypted = decryptPacket(gameState.token._value, args[0]);
            if (decrypted?.packetId === 19) {
                const payload = decrypted.packetPayload, first = payload[0], msg = payload.substr(1);
                regex.lastIndex = 0;
                if (!regex.test(msg)) return reflect.apply(f, th, args);
                const newmsg = uncensor(msg);
                args[0] = blockyfish.encodeBytePacket(gameState.token._value, 19, first + newmsg)
            }
        } catch { }
        return reflect.apply(f, th, args)
    }
})